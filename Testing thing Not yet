local function a(c, d)
	return string.find(c, d, nil, true)
end
local function b(c, d, e, f)
	local g = {}
	if d then
		for h, i in c do
			if type(h) == "number" then
				g[i] = e or true
			elseif type(i) == "table" then
				g[h] = b(i, d)
			else
				g[h] = i
			end
		end
	else
		for _, h in c do
			if not f or f and type(h) == f then
				g[h] = true
			end
		end
	end
	return g
end
local c
do
	local d = "UniversalMethodFinder"
	local e
	e, c = loadstring(game:HttpGet("https://raw.githubusercontent.com/luau/SomeHub/main/" .. d .. ".luau", true), d)()
	e({
		base64encode = 'local a={...}local b=a[1]local function c(a,b)return string.find(a,b,nil,true)end;return c(b,"encode")and(c(b,"base64")or c(string.lower(tostring(a[2])),"base64"))',
		gethiddenproperty = 'string.find(...,"get",nil,true) and string.find(...,"h",nil,true) and string.find(...,"prop",nil,true) and string.sub(...,#...) ~= "s"',
		gethui = 'string.find(...,"get",nil,true) and string.find(...,"h",nil,true) and string.find(...,"ui",nil,true)',
		getnilinstances = 'string.find(...,"nil",nil,true) and string.find(...,"get",nil,true) and string.sub(...,#...) == "s"',
		getscriptbytecode = 'string.find(...,"get",nil,true) and string.find(...,"bytecode",nil,true)',
		hash = 'local a={...}local b=a[1]local function c(a,b)return string.find(a,b,nil,true)end;return c(b,"hash")and c(string.lower(tostring(a[2])),"crypt")',
		protectgui = 'string.find(...,"protect",nil,true) and string.find(...,"ui",nil,true) and not string.find(...,"un",nil,true)',
		setthreadidentity = 'string.find(...,"identity",nil,true) and string.find(...,"set",nil,true)',
	}, true, 10)
end
local d = identifyexecutor or getexecutorname or whatexecutor
local e = d and d() or ""
local f = c.gethiddenproperty
local g, h, i = appendfile, readfile, writefile
local j = c.getscriptbytecode
local k = c.base64encode
local l
local m = setmetatable({}, {
	__index = function(n, o)
		local p, q = pcall(Instance.new, o)
		local r = p and q or game:GetService(o) or settings():GetService(o) or UserSettings():GetService(o)
		if r then
			n[o] = r
		end
		return r
	end,
})
local n
do
	local o
	n = function(p, q)
		if not o then
			o = m.UGCValidationService
		end
		return o:GetPropertyValue(p, q)
	end
	if f then
		local p, q = pcall(f, workspace, "StreamOutBehavior")
		if not p or q ~= nil and typeof(q) ~= "EnumItem" then
			f = nil
		else
			p, q = pcall(f, Instance.new("AnimationRigData", Instance.new("Folder")), "parent")
			if p and q ~= nil and type(q) ~= "string" then
				f = nil
			end
		end
	end
	local function p(q, r, ...)
		local s = table.create(2)
		for t, u in { q, r } do
			local v = os.clock()
			for _ = 1, 50 do
				u(...)
			end
			s[t] = { t = os.clock() - v, f = u }
		end
		table.sort(s, function(w, x)
			return w.t < x.t
		end)
		return s[1].f
	end
	local q = string.rep("\1\0\0\0\1\2\3\4\5\6\7", 50)
	do
		if not bit32.byteswap or not pcall(bit32.byteswap, 1) then
			bit32 = table.clone(bit32)
			local function r(s)
				s %= (bit32.bxor(s, 32))
				if 0x80000000 < s then
					s -= bit32.bxor(s, 32)
				end
				return s
			end
			bit32.byteswap = function(s)
				local t = 8
				local u = 255
				s %= bit32.bxor(2, 32)
				local v = bit32.band(s, u)
				s = bit32.rshift(s, t)
				local w = bit32.band(s, u)
				s = bit32.rshift(s, t)
				local x = bit32.band(s, u)
				s = bit32.rshift(s, t)
				local y = bit32.band(s, u)
				s = r(bit32.lshift(bit32.lshift(bit32.lshift(v, t) + w, t) + x, t) + y)
				return s
			end
			table.freeze(bit32)
		end
		local r
		pcall(function()
			local s = loadstring(game:HttpGet("https://raw.githubusercontent.com/Reselim/Base64/master/Base64.lua", true), "Base64")().encode
			r = function(t)
				return buffer.tostring(s(buffer.fromstring(t)))
			end
		end)
		if k and k("\1\0\0\0\1") == "AQAAAAE=" then
			if r then
				k = p(k, r, q)
			end
		else
			k = r
		end
		assert(k, "base64encode not found")
	end
	do
		local r = c.hash
		if r then
			l = function(s)
				return r(s, "sha384")
			end
		end
		local s = "RequireOnlineModule"
		local t
		pcall(function()
			t = loadstring(game:HttpGet("https://raw.githubusercontent.com/luau/SomeHub/main/" .. s .. ".luau", true), s)()(4544052033).sha384
		end)
		if t then
			if l then
				l = p(l, t, q)
			else
				l = t
			end
		end
		assert(l, "sha384 hash function not found")
	end
end
local o = {}
local p = setmetatable({
	identifier = 1e15,
}, {
	__index = function(q, r)
		local s = k(tostring(q.identifier))
		q.identifier += 1
		q[r] = s
		return s
	end,
})
local q = {}
local r = {}
local s, t = {}, 0
local function u(...)
	local v = 0
	for w, x in { ... } do
		if x then
			v += 2 ^ (w - 1)
		end
	end
	return v
end
local function v(w)
	local x = s[w]
	if not x then
		x = t
		s[w] = x
		t += 1
	end
	return x
end
local function w(x, y)
	return x[y]
end
local x = tonumber(string.split(version(), ".")[2])
local y = {
	string = 0x02,
	boolean = 0x03,
	number = 0x06,
	UDim = 0x09,
	UDim2 = 0x0A,
	Ray = 0x0B,
	Faces = 0x0C,
	Axes = 0x0D,
	BrickColor = 0x0E,
	Color3 = 0x0F,
	Vector2 = 0x10,
	Vector3 = 0x11,
	Vector2int16 = 0x12,
	Vector3int16 = 0x13,
	CFrame = 0x14,
	EnumItem = 0x15,
	NumberSequence = 0x17,
	NumberSequenceKeypoint = 0x18,
	ColorSequence = 0x19,
	ColorSequenceKeypoint = 0x1A,
	NumberRange = 0x1B,
	Rect = 0x1C,
	PhysicalProperties = 0x1D,
	Region3 = 0x1F,
	Region3int16 = 0x20,
	Font = 0x21,
}
local z = {
	["\0\0\128\63\0\0\0\0\0\0\0\0\0\0\0\0\0\0\128\63\0\0\0\0\0\0\0\0\0\0\0\0\0\0\128\63"] = 0x02,
	["\0\0\128\63\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\128\191\0\0\0\0\0\0\128\63\0\0\0\0"] = 0x03,
	["\0\0\128\63\0\0\0\0\0\0\0\0\0\0\0\0\0\0\128\191\0\0\0\0\0\0\0\0\0\0\0\0\0\0\128\191"] = 0x05,
	["\0\0\128\63\0\0\0\0\0\0\0\128\0\0\0\0\0\0\0\0\0\0\128\63\0\0\0\0\0\0\128\191\0\0\0\0"] = 0x06,
	["\0\0\0\0\0\0\128\63\0\0\0\0\0\0\128\63\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\128\191"] = 0x07,
	["\0\0\0\0\0\0\0\0\0\0\128\63\0\0\128\63\0\0\0\0\0\0\0\0\0\0\0\0\0\0\128\63\0\0\0\0"] = 0x09,
	["\0\0\0\0\0\0\128\191\0\0\0\0\0\0\128\63\0\0\0\0\0\0\0\128\0\0\0\0\0\0\0\0\0\0\128\63"] = 0x0a,
	["\0\0\0\0\0\0\0\0\0\0\128\191\0\0\128\63\0\0\0\0\0\0\0\0\0\0\0\0\0\0\128\191\0\0\0\0"] = 0x0c,
	["\0\0\0\0\0\0\128\63\0\0\0\0\0\0\0\0\0\0\0\0\0\0\128\63\0\0\128\63\0\0\0\0\0\0\0\0"] = 0x0d,
	["\0\0\0\0\0\0\0\0\0\0\128\191\0\0\0\0\0\0\128\63\0\0\0\0\0\0\128\63\0\0\0\0\0\0\0\0"] = 0x0e,
	["\0\0\0\0\0\0\128\191\0\0\0\0\0\0\0\0\0\0\0\0\0\0\128\191\0\0\128\63\0\0\0\0\0\0\0\0"] = 0x10,
	["\0\0\0\0\0\0\0\0\0\0\128\63\0\0\0\0\0\0\128\191\0\0\0\0\0\0\128\63\0\0\0\0\0\0\0\128"] = 0x11,
	["\0\0\128\191\0\0\0\0\0\0\0\0\0\0\0\0\0\0\128\63\0\0\0\0\0\0\0\0\0\0\0\0\0\0\128\191"] = 0x14,
	["\0\0\128\191\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\128\63\0\0\0\0\0\0\128\63\0\0\0\128"] = 0x15,
	["\0\0\128\191\0\0\0\0\0\0\0\0\0\0\0\0\0\0\128\191\0\0\0\0\0\0\0\0\0\0\0\0\0\0\128\63"] = 0x17,
	["\0\0\128\191\0\0\0\0\0\0\0\128\0\0\0\0\0\0\0\0\0\0\128\191\0\0\0\0\0\0\128\191\0\0\0\128"] = 0x18,
	["\0\0\0\0\0\0\128\63\0\0\0\128\0\0\128\191\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\128\63"] = 0x19,
	["\0\0\0\0\0\0\0\0\0\0\128\191\0\0\128\191\0\0\0\0\0\0\0\0\0\0\0\0\0\0\128\63\0\0\0\0"] = 0x1b,
	["\0\0\0\0\0\0\128\191\0\0\0\128\0\0\128\191\0\0\0\0\0\0\0\128\0\0\0\0\0\0\0\0\0\0\128\191"] = 0x1c,
	["\0\0\0\0\0\0\0\0\0\0\128\63\0\0\128\191\0\0\0\0\0\0\0\0\0\0\0\0\0\0\128\191\0\0\0\0"] = 0x1e,
	["\0\0\0\0\0\0\128\63\0\0\0\0\0\0\0\0\0\0\0\0\0\0\128\191\0\0\128\191\0\0\0\0\0\0\0\0"] = 0x1f,
	["\0\0\0\0\0\0\0\0\0\0\128\63\0\0\0\0\0\0\128\63\0\0\0\128\0\0\128\191\0\0\0\0\0\0\0\0"] = 0x20,
	["\0\0\0\0\0\0\128\191\0\0\0\0\0\0\0\0\0\0\0\0\0\0\128\63\0\0\128\191\0\0\0\0\0\0\0\0"] = 0x22,
	["\0\0\0\0\0\0\0\0\0\0\128\191\0\0\0\0\0\0\128\191\0\0\0\128\0\0\128\191\0\0\0\0\0\0\0\128"] = 0x23,
}
local A
A = {
	__SEQUENCE = function(B, C, D, E)
		local F = B.Keypoints
		local G = #F
		local H = 4 + (D or 12) * G
		local I = buffer.create(H)
		local J = 0
		buffer.writeu32(I, J, G)
		J += 4
		for _, K in F do
			buffer.writef32(I, J, E or K.Envelope)
			J += 4
			buffer.writef32(I, J, K.Time)
			J += 4
			local L = K.Value
			if C then
				J += C(L, I, J)
			else
				buffer.writef32(I, J, L)
				J += 4
			end
		end
		return I, H
	end,
	["string"] = function(B)
		local C = #B
		local D = 4 + C
		local E = buffer.create(D)
		buffer.writeu32(E, 0, C)
		buffer.writestring(E, 4, B)
		return E, D
	end,
	["boolean"] = function(B)
		local C = buffer.create(1)
		buffer.writeu8(C, 0, B and 1 or 0)
		return C, 1
	end,
	["number"] = function(B)
		local C = buffer.create(8)
		buffer.writef64(C, 0, B)
		return C, 8
	end,
	["UDim"] = function(B)
		local C = buffer.create(8)
		buffer.writef32(C, 0, B.Scale)
		buffer.writei32(C, 4, B.Offset)
		return C, 8
	end,
	["UDim2"] = function(B)
		local C = buffer.create(16)
		local D = A.UDim
		local E = D(B.X)
		buffer.copy(C, 0, E)
		local F = D(B.Y)
		buffer.copy(C, 8, F)
		return C, 16
	end,
	["Ray"] = function(B)
		local C = buffer.create(24)
		local D = A.Vector3
		local E = D(B.Origin)
		buffer.copy(C, 0, E)
		local F = D(B.Direction)
		buffer.copy(C, 12, F)
		return C, 24
	end,
	["Faces"] = function(B)
		local C = buffer.create(4)
		buffer.writeu32(C, 0, u(B.Right, B.Top, B.Back, B.Left, B.Bottom, B.Front))
		return C, 4
	end,
	["Axes"] = function(B)
		local C = buffer.create(4)
		buffer.writeu32(C, 0, u(B.X, B.Y, B.Z))
		return C, 4
	end,
	["BrickColor"] = function(B)
		local C = buffer.create(4)
		buffer.writeu32(C, 0, B.Number)
		return C, 4
	end,
	["Color3"] = function(B)
		local C = buffer.create(12)
		buffer.writef32(C, 0, B.R)
		buffer.writef32(C, 4, B.G)
		buffer.writef32(C, 8, B.B)
		return C, 12
	end,
	["Vector2"] = function(B)
		local C = buffer.create(8)
		buffer.writef32(C, 0, B.X)
		buffer.writef32(C, 4, B.Y)
		return C, 8
	end,
	["Vector3"] = function(B)
		local C = buffer.create(12)
		buffer.writef32(C, 0, B.X)
		buffer.writef32(C, 4, B.Y)
		buffer.writef32(C, 8, B.Z)
		return C, 12
	end,
	["Vector2int16"] = function(B)
		local C = buffer.create(4)
		buffer.writei16(C, 0, B.X)
		buffer.writei16(C, 2, B.Y)
		return C, 4
	end,
	["Vector3int16"] = function(B)
		local C = buffer.create(6)
		buffer.writei16(C, 0, B.X)
		buffer.writei16(C, 2, B.Y)
		buffer.writei16(C, 4, B.Z)
		return C, 6
	end,
	["CFrame"] = function(B)
		local C, D, E, F, G, H, I, J, K, L, M, N = B:GetComponents()
		local O = z[string.pack("<fffffffff", F, G, H, I, J, K, L, M, N)]
		local P = O and 13 or 49
		local Q = buffer.create(P)
		buffer.writef32(Q, 0, C)
		buffer.writef32(Q, 4, D)
		buffer.writef32(Q, 8, E)
		if O then
			buffer.writeu8(Q, 12, O)
		else
			buffer.writeu8(Q, 12, 0x0)
			buffer.writef32(Q, 13, F)
			buffer.writef32(Q, 17, G)
			buffer.writef32(Q, 21, H)
			buffer.writef32(Q, 25, I)
			buffer.writef32(Q, 29, J)
			buffer.writef32(Q, 33, K)
			buffer.writef32(Q, 37, L)
			buffer.writef32(Q, 41, M)
			buffer.writef32(Q, 45, N)
		end
		return Q, P
	end,
	["EnumItem"] = function(B)
		local C, D = A.string(tostring(B.EnumType))
		local E = D + 4
		local F = buffer.create(E)
		buffer.copy(F, 0, C)
		buffer.writeu32(F, D, B.Value)
		return F, E
	end,
	["NumberSequence"] = nil,
	["ColorSequence"] = function(B)
		return A.__SEQUENCE(B, function(C, D, E)
			buffer.copy(D, E, A.Color3(C))
			return 12
		end, 20, 0)
	end,
	["NumberRange"] = function(B)
		local C = buffer.create(8)
		buffer.writef32(C, 0, B.Min)
		buffer.writef32(C, 4, B.Max)
		return C, 8
	end,
	["Rect"] = function(B)
		local C = buffer.create(16)
		local D = A.Vector2
		local E = D(B.Min)
		buffer.copy(C, 0, E)
		local F = D(B.Max)
		buffer.copy(C, 8, F)
		return C, 16
	end,
	["PhysicalProperties"] = function(B)
		local C = 1
		if B then
			C += 20
		end
		local D = buffer.create(C)
		buffer.writeu8(D, 0, B and 1 or 0)
		if B then
			buffer.writef32(D, 1, B.Density)
			buffer.writef32(D, 5, B.Friction)
			buffer.writef32(D, 9, B.Elasticity)
			buffer.writef32(D, 13, B.FrictionWeight)
			buffer.writef32(D, 17, B.ElasticityWeight)
		end
		return D, C
	end,
	["Region3"] = function(B)
		local C = buffer.create(24)
		local D = A.Vector3
		local E = D(B.Min)
		buffer.copy(C, 0, E)
		local F = D(B.Max)
		buffer.copy(C, 12, F)
		return C, 24
	end,
	["Region3int16"] = function(B)
		local C = buffer.create(12)
		local D = A.Vector3int16
		local E = D(B.Min)
		buffer.copy(C, 0, E)
		local F = D(B.Max)
		buffer.copy(C, 6, F)
		return C, 12
	end,
	["Font"] = 636 < x and function(B)
		local C = A.string
		local D, E = C(B.Family)
		local F, G = C("")
		local H = 3 + E + G
		local I = buffer.create(H)
		local J, K = pcall(w, B, "Weight")
		local L, M = pcall(w, B, "Style")
		buffer.writeu16(I, 0, J and K.Value or 0)
		buffer.writeu8(I, 2, L and M.Value or 0)
		buffer.copy(I, 3, D)
		buffer.copy(I, 3 + E, F)
		return I, H
	end or function(B)
		local C = A.string
		local D, E = C(B.Family)
		local F, G = C("")
		local H = 3 + E + G
		local I = buffer.create(H)
		local J = tostring(B)
		local K = a(J, "Weight = ,")
		local L = a(J, "Style =  }")
		buffer.writeu16(I, 0, K and 0 or B.Weight.Value)
		buffer.writeu8(I, 2, L and 0 or B.Style.Value)
		buffer.copy(I, 3, D)
		buffer.copy(I, 3 + E, F)
		return I, H
	end,
}
do
	A.NumberSequence = A.__SEQUENCE
end
local B = "[&<>\"'\0\1-\9\11-\12\14-\31\127-\255]"
local C = {
	["&"] = "&amp;",
	["<"] = "&lt;",
	[">"] = "&gt;",
	['"'] = "&#34;",
	["'"] = "&#39;",
	["\0"] = "",
}
for D, E in string.gmatch(B, "(.)%-(.)") do
	for F = string.byte(D), string.byte(E) do
		C[string.char(F)] = "&#" .. F .. ";"
	end
end
local G
G = {
	__CDATA = function(H)
		return "<![CDATA[" .. H .. "]]>"
	end,
	__ENUM = function(H)
		return H.Value, "token"
	end,
	__NORMALIZE_NUMBER = function(H)
		if H ~= H then
			return "NAN"
		elseif H == math.huge then
			return "INF"
		elseif H == -math.huge then
			return "-INF"
		end
		return H
	end,
	__NORMALIZE_RANGE = function(H)
		return H ~= H and "0" or H
	end,
	__MINMAX = function(H, I, J)
		return "<min>" .. J(H) .. "</min><max>" .. J(I) .. "</max>"
	end,
	__PROTECTEDSTRING = function(H)
		return a(H, "]]>") and string.gsub(H, B, C) or G.__CDATA(H)
	end,
	__SEQUENCE = function(H, I)
		local J = G.__NORMALIZE_RANGE
		local K = ""
		for _, L in H.Keypoints do
			local M = L.Value
			K ..= L.Time .. " " .. (I and I(M) or J(M) .. " " .. J(L.Envelope) .. " ")
		end
		return K
	end,
	__VECTOR = function(H, I, J)
		local K = "<X>" .. H .. "</X><Y>" .. I .. "</Y>"
		if J then
			K ..= "<Z>" .. J .. "</Z>"
		end
		return K
	end,
	Axes = function(H)
		return "<axes>" .. u(H.X, H.Y, H.Z) .. "</axes>"
	end,
	BinaryString = function(H)
		return H == "" and "" or k(H)
	end,
	BrickColor = function(H)
		return H.Number
	end,
	CFrame = function(H)
		local I, J, K, L, M, N, O, P, Q, R, S, T = H:GetComponents()
		return G.__VECTOR(I, J, K) .. "<R00>" .. L .. "</R00><R01>" .. M .. "</R01><R02>" .. N .. "</R02><R10>" .. O .. "</R10><R11>" .. P .. "</R11><R12>" .. Q .. "</R12><R20>" .. R .. "</R20><R21>" .. S .. "</R21><R22>" .. T .. "</R22>", "CoordinateFrame"
	end,
	Color3 = function(H)
		return "<R>" .. H.R .. "</R><G>" .. H.G .. "</G><B>" .. H.B .. "</B>"
	end,
	Color3uint8 = function(H)
		return 0xFF000000 + (math.floor(H.R * 255) * 0x10000) + (math.floor(H.G * 255) * 0x100) + math.floor(H.B * 255)
	end,
	ColorSequence = function(H)
		return G.__SEQUENCE(H, function(I)
			local J = G.__NORMALIZE_RANGE
			return J(I.R) .. " " .. J(I.G) .. " " .. J(I.B) .. " 0 "
		end)
	end,
	Content = function(H)
		local I = H.SourceType
		return I == Enum.ContentSourceType.None and "<null></null>" or I == Enum.ContentSourceType.Uri and "<uri>" .. G.string(H.Uri) .. "</uri>" or I == Enum.ContentSourceType.Object and "<Ref>" .. v(H.Object) .. "</Ref>"
	end,
	ContentId = function(H)
		return H == "" and "<null></null>" or "<url>" .. G.string(H) .. "</url>", "Content"
	end,
	CoordinateFrame = function(H)
		return "<CFrame>" .. G.CFrame(H) .. "</CFrame>"
	end,
	Faces = function(H)
		return "<faces>" .. u(H.Right, H.Top, H.Back, H.Left, H.Bottom, H.Front) .. "</faces>"
	end,
	Font = 636 < x and function(H)
		local I, J = pcall(w, H, "Weight")
		local K, L = pcall(w, H, "Style")
		return "<Family>" .. G.ContentId(H.Family) .. "</Family><Weight>" .. (I and G.__ENUM(J) or "") .. "</Weight><Style>" .. (K and L.Name or "") .. "</Style>"
	end or function(H)
		local I = tostring(H)
		local J = a(I, "Weight = ,")
		local K = a(I, "Style =  }")
		return "<Family>" .. G.ContentId(H.Family) .. "</Family><Weight>" .. (J and "" or G.__ENUM(H.Weight)) .. "</Weight><Style>" .. (K and "" or H.Style.Name) .. "</Style>"
	end,
	NumberRange = function(H)
		local I = G.__NORMALIZE_RANGE
		return I(H.Min) .. " " .. I(H.Max)
	end,
	NumberSequence = nil,
	PhysicalProperties = function(H)
		local I = "<CustomPhysics>" .. G.bool(H and true or false) .. "</CustomPhysics>"
		return H and I .. "<Density>" .. H.Density .. "</Density><Friction>" .. H.Friction .. "</Friction><Elasticity>" .. H.Elasticity .. "</Elasticity><FrictionWeight>" .. H.FrictionWeight .. "</FrictionWeight><ElasticityWeight>" .. H.ElasticityWeight .. "</ElasticityWeight>" or I
	end,
	Ray = function(H)
		local I = G.Vector3
		return "<origin>" .. I(H.Origin) .. "</origin><direction>" .. I(H.Direction) .. "</direction>"
	end,
	Rect = function(H)
		return G.__MINMAX(H.Min, H.Max, G.Vector2), "Rect2D"
	end,
	Region3 = function(H)
		local I = H.CFrame.Position
		local J = H.Size * 0.5
		return G.__MINMAX(I - J, I + J, G.Vector3)
	end,
	Region3int16 = function(H)
		return G.__MINMAX(H.Min, H.Max, G.Vector3int16)
	end,
	SharedString = function(H)
		H = H == "" and "" or k(H)
		local I = p[H]
		if o[I] == nil then
			o[I] = H
		end
		return I
	end,
	SecurityCapabilities = nil,
	UDim = function(H)
		return "<S>" .. H.Scale .. "</S><O>" .. H.Offset .. "</O>"
	end,
	UDim2 = function(H)
		local I, J = H.X, H.Y
		return "<XS>" .. I.Scale .. "</XS><XO>" .. I.Offset .. "</XO><YS>" .. J.Scale .. "</YS><YO>" .. J.Offset .. "</YO>"
	end,
	Vector2 = function(H)
		return G.__VECTOR(H.X, H.Y)
	end,
	Vector2int16 = nil,
	Vector3 = function(H)
		return G.__VECTOR(H.X, H.Y, H.Z)
	end,
	Vector3int16 = nil,
	bool = function(H)
		return H and "true" or "false"
	end,
	double = nil,
	float = nil,
	int = nil,
	int64 = nil,
	string = function(H)
		return (H == nil or H == "") and "" or a(H, "]]>") and string.gsub(H, B, C) or G.__CDATA(string.gsub(H, "\0", ""))
	end,
}
do
	local H
	pcall(function()
		H = SecurityCapabilities.new()
	end)
	if H then
		local I = {
			Plugin = 2 ^ 0,
			LocalUser = 2 ^ 1,
			WritePlayer = 2 ^ 2,
			RobloxScript = 2 ^ 3,
			RobloxEngine = 2 ^ 4,
			NotAccessible = 2 ^ 5,
			RunClientScript = 2 ^ 8,
			RunServerScript = 2 ^ 9,
			AccessOutsideWrite = 2 ^ 11,
			Unassigned = 2 ^ 15,
			AssetRequire = 2 ^ 16,
			LoadString = 2 ^ 17,
			ScriptGlobals = 2 ^ 18,
			CreateInstances = 2 ^ 19,
			Basic = 2 ^ 20,
			Audio = 2 ^ 21,
			DataStore = 2 ^ 22,
			Network = 2 ^ 23,
			Physics = 2 ^ 24,
			UI = 2 ^ 25,
			CSG = 2 ^ 26,
			Chat = 2 ^ 27,
			Animation = 2 ^ 28,
			Avatar = 2 ^ 29,
			Input = 2 ^ 30,
			Environment = 2 ^ 31,
			RemoteEvent = 2 ^ 32,
			LegacySound = 2 ^ 33,
			Players = 2 ^ 34,
			CapabilityControl = 2 ^ 35,
			InternalTest = 2 ^ 60,
			PluginOrOpenCloud = 2 ^ 61,
			Assistant = 2 ^ 62,
		}
		G.SecurityCapabilities = function(J)
			if J == H then
				return 0
			end
			local K = 0
			for _, L in string.split(tostring(J), " | ") do
				local M = I[L]
				if M then
					K += M
				end
			end
			return K
		end
	end
end
for H, I in {
	NumberSequence = "__SEQUENCE",
	Vector2int16 = "Vector2",
	Vector3int16 = "Vector3",
	double = "__NORMALIZE_NUMBER",
	float = "__NORMALIZE_NUMBER",
	int = "__NORMALIZE_NUMBER",
	int64 = "__NORMALIZE_NUMBER",
} do
	G[H] = G[I]
end
if x < math.huge then
	G.Content = G.ContentId
end
local H
do
	local I = {
		Whitelist = { TriangleMeshPart = b({ "CollisionFidelity" }) },
		Blacklist = {
			LuaSourceContainer = b({ "ScriptGuid" }),
			Instance = b({ "UniqueId", "HistoryId" }),
		},
	}
	local J = {
		Instance = {
			AttributesSerialize = function(K)
				local L = K:GetAttributes()
				if not next(L) then
					return ""
				end
				local M = 0
				local N = 4
				local O = {}
				local P = table.clone(L)
				for Q, R in L do
					M += 1
					O[M] = Q
					local S = typeof(R)
					local T = A[S]
					local U
					P[Q], U = T(R)
					N += 5 + #Q + U
				end
				table.sort(O)
				local V = buffer.create(N)
				local W = 0
				buffer.writeu32(V, W, M)
				W += 4
				local X = A.string
				for _, Q in O do
					local Y, Z = X(Q)
					buffer.copy(V, W, Y)
					W += Z
					buffer.writeu8(V, W, y[typeof(L[Q])])
					W += 1
					local aa = P[Q]
					buffer.copy(V, W, aa)
					W += buffer.len(aa)
				end
				return buffer.tostring(V)
			end,
			DefinesCapabilities = "Sandboxed",
			Tags = function(K)
				local L = K:GetTags()
				if #L == 0 then
					return ""
				end
				return table.concat(L, "\0")
			end,
		},
		BallSocketConstraint = { MaxFrictionTorqueXml = "MaxFrictionTorque" },
		BasePart = {
			Color3uint8 = "Color",
			MaterialVariantSerialized = "MaterialVariant",
			size = "Size",
		},
		DoubleConstrainedValue = { value = "Value" },
		IntConstrainedValue = { value = "Value" },
		Terrain = {
			AcquisitionMethod = "LastUsedModificationMethod",
			MaterialColors = function(K)
				local L = {
					Enum.Material.Grass,
					Enum.Material.Slate,
					Enum.Material.Concrete,
					Enum.Material.Brick,
					Enum.Material.Sand,
					Enum.Material.WoodPlanks,
					Enum.Material.Rock,
					Enum.Material.Glacier,
					Enum.Material.Snow,
					Enum.Material.Sandstone,
					Enum.Material.Mud,
					Enum.Material.Basalt,
					Enum.Material.Ground,
					Enum.Material.CrackedLava,
					Enum.Material.Asphalt,
					Enum.Material.Cobblestone,
					Enum.Material.Ice,
					Enum.Material.LeafyGrass,
					Enum.Material.Salt,
					Enum.Material.Limestone,
					Enum.Material.Pavement,
				}
				local M = buffer.create(69)
				local N = 6
				local O = { "R", "G", "B" }
				for _, P in L do
					local Q = K:GetMaterialColor(P)
					for _, R in O do
						buffer.writeu8(M, N, math.floor(Q[R] * 255))
						N += 1
					end
				end
				return buffer.tostring(M)
			end,
		},
		TriangleMeshPart = {
			FluidFidelityInternal = "FluidFidelity",
		},
		MeshPart = { InitialSize = "MeshSize" },
		PartOperation = { InitialSize = "MeshSize" },
		Part = { shape = "Shape" },
		TrussPart = { style = "Style" },
		FormFactorPart = {
			formFactorRaw = "FormFactor",
		},
		Fire = { heat_xml = "Heat", size_xml = "Size" },
		Humanoid = { Health_XML = "Health" },
		HumanoidDescription = {
			EmotesDataInternal = function(K)
				local L = ""
				for M, N in K:GetEmotes() do
					L ..= M .. "^" .. table.concat(N, "^") .. "^\\"
				end
				return L
			end,
			EquippedEmotesDataInternal = function(K)
				local L = ""
				for _, M in K:GetEquippedEmotes() do
					L ..= M.Slot .. "^" .. M.Name .. "\\"
				end
				return L
			end,
		},
		LocalizationTable = {
			Contents = function(K)
				return K:GetContents()
			end,
		},
		MaterialService = { Use2022MaterialsXml = "Use2022Materials" },
		Model = {
			ScaleFactor = function(K)
				return K:GetScale()
			end,
			WorldPivotData = "WorldPivot",
		},
		PackageLink = { PackageIdSerialize = "PackageId", VersionIdSerialize = "VersionNumber" },
		Players = { MaxPlayersInternal = "MaxPlayers", PreferredPlayersInternal = "PreferredPlayers" },
		StarterPlayer = { AvatarJointUpgrade_Serialized = "AvatarJointUpgrade" },
		Smoke = { size_xml = "Size", opacity_xml = "Opacity", riseVelocity_xml = "RiseVelocity" },
		Sound = {
			xmlRead_MaxDistance_3 = "RollOffMaxDistance",
		},
		WeldConstraint = {
			Part0Internal = "Part0",
			Part1Internal = "Part1",
		},
		Workspace = {
			CollisionGroupData = function()
				local K = game:GetService("PhysicsService"):GetRegisteredCollisionGroups()
				local L = #K
				if L == 0 then
					return "\1\0"
				end
				local M = 2
				for _, N in K do
					M += 7 + #N.name
				end
				local O = buffer.create(M)
				local P = 0
				buffer.writeu8(O, P, 1)
				P += 1
				buffer.writeu8(O, P, L)
				P += 1
				for Q, N in K do
					local R, S, T = N.name, Q - 1, N.mask
					local U = #R
					buffer.writeu8(O, P, S)
					P += 1
					buffer.writeu8(O, P, 4)
					P += 1
					buffer.writei32(O, P, T)
					P += 4
					buffer.writeu8(O, P, U)
					P += 1
					buffer.writestring(O, P, R)
					P += U
				end
				return buffer.tostring(O)
			end,
		},
	}
	local function K()
		local L
		local M, N = pcall(function()
			if e == "Zenith" or e == "Velocity" then
				return
			end
			local O = tostring(x)
			local P, Q = pcall(h, O)
			if P and Q and Q ~= "" and pcall(m.HttpService.JSONDecode, m.HttpService, Q) then
				L = Q
				return
			end
			local R, S = {}, false
			local T = string.split(game:HttpGet("https://setup.rbxcdn.com/DeployHistory.txt", true), "\n")
			for U = #T, 1, -1 do
				local V = T[U]
				local W = string.match(V, "file version: ([%d, ]+)")
				if W then
					if string.split(W, ", ")[2] == O then
						S = true
						local X = string.match(V, "(version%-[^%s]+)")
						if X then
							R[X] = true
						end
					elseif S then
						break
					end
				end
			end
			for Y in R do
				P, Q = pcall(game.HttpGet, game, "https://setup.rbxcdn.com/" .. Y .. "-Full-API-Dump.json", true)
				if P then
					local Z, aa = pcall(m.HttpService.JSONDecode, m.HttpService, Q)
					if Z then
						L = m.HttpService:JSONEncode(aa.Classes)
						break
					end
				end
			end
			i(O, L)
		end)
		if not M or not L then
			warn("[DEBUG] Failed to get " .. version() .. " API Dump, trying latest..")
			warn("[DEBUG]", N)
			L = m.HttpService:JSONEncode(m.HttpService:JSONDecode(game:HttpGet("https://raw.githubusercontent.com/MaximumADHD/Roblox-Client-Tracker/roblox/Mini-API-Dump.json", true)).Classes)
		end
		local O = {}
		local P, Q = I.Whitelist, I.Blacklist
		for _, R in m.HttpService:JSONDecode(L) do
			local S, T = {}, 1
			local U = {
				Properties = S,
				Superclass = R.Superclass,
			}
			local V = R.Tags
			local W = R.Name
			if V then
				U.Tags = b(V, nil, nil, "string")
			end
			local X = J[W]
			local Y, Z = P[W], Q[W]
			for _, aa in R.Members do
				if aa.MemberType == "Property" then
					local ab = aa.Serialization
					if ab.CanLoad then
						local ac = aa.Name
						if (ab.CanSave or Y and Y[ac]) and not (Z and Z[ac]) then
							local ad = aa.Tags
							local ae = aa.ValueType
							local af = ae.Name
							if 645 <= x and af == "Content" then
								continue
							end
							local ag, ah
							if ad then
								for _, ai in ad do
									if type(ai) == "table" then
										ah = ai.PreferredDescriptorName
										if ah and ag then
											break
										end
									elseif ai == "NotScriptable" then
										ag = true
										if ah then
											break
										end
									end
								end
							end
							local aj = {
								Name = ac,
								Category = ae.Category,
								ValueType = af,
								Special = ag,
								CanRead = nil,
							}
							if string.sub(af, 1, 8) == "Optional" then
								aj.Optional = string.sub(af, 9)
							end
							if X then
								local ak = X[ac]
								if ak then
									aj.Fallback = type(ak) == "function" and ak or ah and function(al)
										local am, an = pcall(w, al, ah)
										if am then
											return an
										end
										return al[ak]
									end or function(al)
										return al[ak]
									end
								end
							elseif ah then
								aj.Fallback = function(al)
									return al[ah]
								end
							end
							S[T] = aj
							T += 1
						end
					end
				end
			end
			O[W] = U
		end
		return O
	end
	local L, M = pcall(K)
	if L then
		H = M
	else
		warn("Failed to load the API Dump")
		warn(M)
		return
	end
end
local I = getgenv and getgenv() or _G or shared
local function J(K, L)
	if I.USSI then
		return
	end
	I.USSI = true
	do
		local M = c.setthreadidentity
		if M then
			pcall(M, 8)
		end
	end
	local M, N, O, P = "", 0, 0, table.create(1)
	local Q, R = {}, 1
	local S = '<roblox version="4">'
	local T
	local U = {
		mode = "optimized",
		noscripts = false,
		scriptcache = true,
		timeout = 10,
		__DEBUG_MODE = false,
		Callback = false,
		DecompileJobless = false,
		DecompileIgnore = {
			"TextChatService",
			ModuleScript = nil,
		},
		IgnoreDefaultPlayerScripts = e ~= "Wave" and true,
		SaveBytecode = false,
		IgnoreProperties = {},
		IgnoreList = { "CoreGui", "CorePackages" },
		ExtraInstances = {},
		NilInstances = false,
		NilInstancesFixes = {},
		SaveCacheInterval = 0x1600 * 10,
		ShowStatus = true,
		SafeMode = false,
		ShutdownWhenDone = false,
		AntiIdle = true,
		Anonymous = false,
		ReadMe = true,
		FilePath = false,
		Object = false,
		IsModel = false,
		IgnoreDefaultProperties = true,
		IgnoreNotArchivable = true,
		IgnorePropertiesOfNotScriptsOnScriptsMode = false,
		IgnoreSpecialProperties = b({ "Fluxus", "Delta", "Solara" })[e] or false,
		IsolateLocalPlayer = false,
		IsolateLocalPlayerCharacter = false,
		IsolatePlayers = false,
		IsolateStarterPlayer = false,
		RemovePlayerCharacters = true,
		SaveNotCreatable = false,
		NotCreatableFixes = {
			"",
			"AnimationTrack",
			"Player",
			"PlayerGui",
			"PlayerScripts",
			"PlayerMouse",
			"ScreenshotHud",
			"StudioData",
			"TextSource",
			"TouchTransmitter",
		},
		IgnoreSharedStrings = e ~= "Wave" and true,
		SharedStringOverwrite = false,
		TreatUnionsAsParts = e == "Solara",
		AlternativeWritefile = not b({ "WRD", "Xeno", "Zorara" })[e],
		OptionsAliases = {
			DecompileTimeout = "timeout",
			FileName = "FilePath",
			IgnoreArchivable = "IgnoreNotArchivable",
			IgnoreDefaultProps = "IgnoreDefaultProperties",
			SaveNonCreatable = "SaveNotCreatable",
			SavePlayers = "IsolatePlayers",
		},
	}
	local V, W = {}, {}
	for X in U do
		local Y = string.lower(X)
		if V[Y] then
			warn("DUPLICATE OPTION", X)
		else
			V[Y] = X
		end
	end
	for Z, X in U.OptionsAliases do
		local Y = string.lower(Z)
		if V[Y] then
			warn("DUPLICATE ALIAS", Z)
		else
			V[Y] = X
		end
	end
	do
		local function X(Y, Z, aa)
			return function(ab, ac)
				local ad
				if not aa then
					ad = U.NilInstancesFixes[Y]
				end
				local ae
				local af = not ad
				if af then
					ae = Instance.new(Z)
					if not aa then
						U.NilInstancesFixes[Y] = ae
					end
					ac[ae] = { __SaveSpecific = true, __Children = { ab }, Properties = { Name = Y } }
				else
					ae = ad
					table.insert(ac[ae].__Children, ab)
				end
				if af then
					return ae
				end
			end
		end
		U.NilInstancesFixes.Animator = X("Animator has to be placed under Humanoid or AnimationController", "AnimationController")
		U.NilInstancesFixes.AdPortal = X("AdPortal must be parented to a Part", "Part")
		U.NilInstancesFixes.Attachment = X("Attachments must be parented to a BasePart or another Attachment", "Part")
		U.NilInstancesFixes.BaseWrap = X("BaseWrap must be parented to a MeshPart", "MeshPart")
		U.NilInstancesFixes.PackageLink = X("Package already has a PackageLink", "Folder", true)
		if L and type(L) == "table" then
			local Y = K
			local Z = typeof(Y)
			K = L
			if Z == "Instance" then
				K.Object = Y
			elseif Z == "table" and typeof(Y[1]) == "Instance" then
				K.ExtraInstances = Y
				U.IsModel = true
			end
		end
		local Z = typeof(K)
		if Z == "table" then
			if typeof(K[1]) == "Instance" then
				U.mode = "invalidmode"
				U.ExtraInstances = K
				U.IsModel = true
				K = {}
			else
				for aa, ab in K do
					local ac = V[string.lower(aa)]
					if ac then
						U[ac] = ab
						W[ac] = true
					end
				end
				local ad = K.Decompile
				if ad ~= nil then
					U.noscripts = not ad
				end
				local ae = K.SavePlayerCharacters
				if ae ~= nil then
					U.RemovePlayerCharacters = not ae
				end
				local af = K.RemovePlayers
				if af ~= nil then
					U.IsolatePlayers = not af
				end
			end
		elseif Z == "Instance" then
			U.mode = "invalidmode"
			U.Object = K
			K = {}
		else
			K = {}
		end
	end
	if U.IgnoreDefaultPlayerScripts then
		local X = U.DecompileIgnore
		local Y = m.StarterPlayer:FindFirstChild("StarterPlayerScripts")
		local Z = { ModuleScript = { "PlayerModule" }, LocalScript = { "RbxCharacterSounds" } }
		if Y then
			for _, aa in Z do
				for _, ab in aa do
					local ac = Y:FindFirstChild(ab)
					if ac then
						table.insert(X, ac)
					end
				end
			end
		end
	end
	local X = {}
	local Y, Z, aa, ab = b(U.DecompileIgnore, true), b(U.IgnoreList, true), b(U.IgnoreProperties), b(U.NotCreatableFixes, true, "Folder")
	local ac = U.__DEBUG_MODE
	if ac and type(ac) ~= "function" then
		ac = warn
	end
	local ad = U.FilePath
	local ae = U.SaveCacheInterval
	local af = U.Object
	local ag = U.IsModel
	if af and K.IsModel == nil then
		ag = true
	end
	local ah = U.IgnoreDefaultProperties
	local ai = not U.IgnoreNotArchivable
	local aj = U.IgnorePropertiesOfNotScriptsOnScriptsMode
	local ak
	if U and f then
		ak = f
		f = nil
	end
	local al = U.SaveNotCreatable
	local am = U.TreatUnionsAsParts
	local an = U.DecompileJobless
	if an then
		U.scriptcache = true
	end
	local ao = U.scriptcache and j
	local ap = U.timeout
	local aq = U.IgnoreSharedStrings
	local ar = U.SharedStringOverwrite
	local as = I.scriptcache
	local at, au, av, aw, ax, ay, az
	if U.ReadMe then
		az = {}
	end
	if ao and not as then
		as = {}
		I.scriptcache = as
	end
	if af == game then
		U.mode = "full"
		af = nil
		ag = nil
	end
	local function aA(aB)
		return aB:IsA("LuaSourceContainer")
	end
	do
		local aB = string.lower(U.mode)
		local aC = table.clone(U.ExtraInstances)
		local aD = game.PlaceId
		pcall(function()
			aD ..= " " .. m.MarketplaceService:GetProductInfo(aD).Name
		end)
		local function aE(aF)
			return string.sub(string.gsub(string.gsub(string.gsub(aF, "[^%w _]", ""), " +", " "), " +$", ""), 1, 240)
		end
		if af then
			if aB == "optimized" then
				aB = "full"
			end
			for _, aF in {
				"IsolateLocalPlayer",
				"IsolateLocalPlayerCharacter",
				"IsolatePlayers",
				"IsolateStarterPlayer",
				"NilInstances",
			} do
				if W[aF] == nil then
					U[aF] = false
				end
			end
		end
		if ag then
			aw = (ad or aE("model " .. aD .. " " .. (af or aC[1] or game):GetFullName())) .. ".rbxmx"
		else
			aw = (ad or aE("place " .. aD)) .. ".rbxlx"
		end
		if I[aw] then
			return
		end
		I[aw] = true
		I.USSI = nil
		if aB ~= "scripts" then
			aj = nil
		end
		local aG = af or game
		if aB == "full" then
			if not af then
				local aH = aG:GetChildren()
				if 0 < #aH then
					local aI = b(aC)
					for _, aJ in aH do
						if not aI[aJ] then
							table.insert(aC, aJ)
						end
					end
				end
			end
		elseif aB == "optimized" then
			local aI = b(aC)
			for _, aK in {
				"Workspace",
				"Players",
				"Lighting",
				"MaterialService",
				"ReplicatedFirst",
				"ReplicatedStorage",
				"ServerScriptService",
				"ServerStorage",
				"StarterGui",
				"StarterPack",
				"StarterPlayer",
				"Teams",
				"SoundService",
				"Chat",
				"TextChatService",
				"LocalizationService",
				"JointsService",
			} do
				local aL = game:FindService(aK)
				if aL and not aI[aL] then
					table.insert(aC, aL)
				end
			end
		elseif aB == "scripts" then
			local aM = {}
			for _, aN in aG:GetDescendants() do
				if aA(aN) then
					local aO = aN.Parent
					while aO and aO ~= aG do
						aN = aN.Parent
						aO = aN.Parent
					end
					if aO then
						aM[aN] = true
					end
				end
			end
			for aN in aM do
				table.insert(aC, aN)
			end
		end
		au = aC
		if af then
			table.insert(au, 1, af)
		end
	end
	local aB = U.IsolateLocalPlayer
	local aC = U.IsolateLocalPlayerCharacter
	local aD = U.IsolatePlayers
	local aE = U.IsolateStarterPlayer
	local aF = U.NilInstances
	if aF and enablenilinstances then
		enablenilinstances()
	end
	local function aG()
		local aH
		for aI, aJ in {
			"B",
			"KB",
			"MB",
			"GB",
			"TB",
		} do
			if O < 0x400 ^ aI then
				aH = math.floor(O / (0x400 ^ (aI - 1)) * 10) / 10 .. " " .. aJ
				break
			end
		end
		return aH
	end
	local aH = m.RunService
	local function aI()
		aH.RenderStepped:Wait()
	end
	local aJ
	local function aK(aL, aM, aN, aO, ...)
		local aP
		if T then
			if aM then
				aP = T.Text
			end
			aJ = task.spawn(function()
				local aQ = 0
				local aR = { "|", "/", "—", "\\" }
				local aS = #aR
				local function aT()
					aQ += 1
					if aS < aQ then
						aQ = 1
					end
					return aR[aQ]
				end
				aL ..= " "
				while true do
					T.Text = aL .. aT()
					task.wait(0.25)
				end
			end)
			if aN then
				aI()
			end
		end
		local aU = { aO(...) }
		if aJ then
			task.cancel(aJ)
			aJ = nil
			if aP then
				T.Text = aP
			end
		end
		return unpack(aU)
	end
	local function aL(aM, aN, aO)
		return aM < 0 and function(aP)
			return pcall(aN, aP)
		end or function(aP)
			local aQ = coroutine.running()
			local aR, aS
			aR = task.delay(aM, function()
				aS = true
				coroutine.resume(aQ, nil, aO)
			end)
			task.spawn(function()
				local aT, aU = pcall(aN, aP)
				if aS then
					return
				end
				task.cancel(aR)
				while coroutine.status(aQ) ~= "suspended" do
					task.wait()
				end
				coroutine.resume(aQ, aT, aU)
			end)
			return coroutine.yield()
		end
	end
	local aM
	if j then
		aM = aL(3, j)
	end
	local aN
	if U.SaveBytecode and j then
		aN = function(aO)
			local aP, aQ = aM(aO)
			if aP and aQ and aQ ~= "" then
				return "-- Bytecode (Base64):\n-- " .. k(aQ) .. "\n\n"
			end
		end
	end
	do
		local aO = decompile
		if U.noscripts then
			av = function()
				return "-- Decompiling is disabled"
			end
		elseif aO then
			local aP = aL(ap, aO, "Decompiler timed out")
			av = function(aQ)
				local aR
				if ao then
					local aS, aT = aM(aQ)
					local aU
					if aS then
						if not aT or aT == "" then
							return "-- The Script is Empty"
						end
						aR = l(aT)
						aU = as[aR]
					end
					if aU then
						if ac then
							ac("Found in Cache", aQ:GetFullName())
						end
						return aU
					end
				else
					if an then
						return "-- Not found in already decompiled ScriptCache"
					end
					task.wait()
				end
				local aS, aV = aK("Decompiling " .. aQ.Name, true, nil, aP, aQ)
				if not aV then
					aS, aV = false, "Empty Output"
				end
				local aW
				if aS then
					aV = string.gsub(aV, "\0", "\\0")
					aW = aV
				else
					aW = "--[[ Failed to decompile. Reason:\n" .. (aV or "") .. "\n]]"
				end
				if ao and aR then
					as[aR] = aW
					if ac then
						ac("Cached", aQ:GetFullName())
					end
				end
				return aW
			end
		else
			av = function()
				return "-- Your Executor does NOT have a Decompiler"
			end
		end
	end
	local function aO()
		return m.Players.LocalPlayer or m.Players:GetPropertyChangedSignal("LocalPlayer"):Wait() or m.Players.LocalPlayer
	end
	local function aP(aQ)
		local aR, aS = pcall(m.HttpService.JSONDecode, m.HttpService, aQ)
		if aR and aS.errors then
			return
		end
		return true
	end
	local function aQ(aR, aS, aT)
		local aU
		if aS ~= aT then
			aU = X[aR]
			if not aU then
				aU = { Properties = { Name = "[" .. aT .. "] " .. aS } }
				X[aR] = aU
			end
		end
		return aU
	end
	local function aR(aS, aT, aU)
		return aS == nil or aS == "can't get value" or type(aS) == "string" and (aU == "Enum" or a(aS, "Unable to get property " .. aT))
	end
	local aS = "__BREAK" .. m.HttpService:GenerateGUID(false)
	local function aT(aU, aV, aW, aX, aY, aZ)
		local aa = aS
		local ab = X[aU]
		if ab then
			local ac = ab.Properties
			if ac then
				local ad = ac[aW]
				if ad ~= nil then
					return ad
				end
			end
		end
		local ae = aV.CanRead
		if ae == false then
			return aS
		end
		if aX then
			if f then
				local af, ag = pcall(f, aU, aW)
				if af then
					aa = ag
				end
				if aR(aa, aW, aY) then
					if ag ~= nil or not aZ then
						if ac then
							ac("Filtered", aW)
						end
						aV.CanRead = false
					end
					return aS
				end
			end
		else
			if ae then
				aa = aU[aW]
			else
				local af, ag = pcall(w, aU, aW)
				if af then
					aa = ag
				elseif f then
					af, ag = pcall(f, aU, aW)
					if af then
						aa = ag
						aV.Special = true
					end
				end
				aV.CanRead = af
				if not af or aR(aa, aW, aY) then
					return aS
				end
			end
		end
		return aa
	end
	local function aU(aV, aW)
		return '<Item class="' .. aV .. '" referent="' .. v(aW) .. '"><Properties>'
	end
	local function aV(aW, aX, aY)
		return "<" .. aW .. ' name="' .. aX .. '">' .. aY .. "</" .. aW .. ">"
	end
	local function aW(aX, aY, aZ)
		local aa, ab = (aZ or G[aY])(aX)
		return aa, ab or aY
	end
	local function aX(aY, aZ, aa)
		local ab = aY[aZ]
		if ab then
			return ab
		elseif ab == nil then
			for ac, ad in aY do
				if aa:IsA(ac) then
					return ad
				end
			end
		end
	end
	local function aY(aZ)
		local aa = {}
		local ab = H[aZ]
		while ab do
			local ac = ab.Properties
			table.move(ac, 1, #ac, #aa + 1, aa)
			ab = H[ab.Superclass]
		end
		q[aZ] = aa
		return aa
	end
	local aZ = 200 * 1024 * 1024
	local function ba(bb)
		local bc = table.concat(Q)
		M ..= bc
		local bd = #bc
		O += bd
		N += bd
		table.clear(Q)
		R = 1
		if aZ < N or bb then
			table.insert(P, { size = N, str = M })
			M, N = "", 0
		end
		if T then
			T.Text = "Saving.. Size: " .. aG()
		end
		aI()
	end
	local function bb(bc, bd)
		local be = Instance.new(bc)
		local bf = aU(be.ClassName, be)
		for bg, bh in bd do
			local bi, bj, bk
			if "Source" == bg then
				bk = "ProtectedString"
				bj = G.__PROTECTEDSTRING(bh)
				bi = true
			elseif "Name" == bg then
				bi = true
				bj, bk = aW(bh, "string")
			end
			if bi then
				bf ..= aV(bk, bg, bj)
			end
		end
		bf ..= "</Properties>"
		return bf
	end
	local function bc(bd)
		for _, be in bd do
			if ai and not be.Archivable then
				continue
			end
			local bf = Z[be]
			if bf then
				continue
			end
			local bg = be.ClassName
			local bh = be.Name
			do
				local bi = Z[bg]
				if bi and (bi == true or bi[bh]) then
					continue
				end
			end
			if not at then
				at = Y[be]
				if at == nil then
					local bi = Y[bg]
					if bi then
						at = bi == true or bi[bh]
					end
				end
				if at then
					at = be
				elseif at == false then
					at = 1
				end
			end
			local bi, bj, bk
			do
				local bl = ab[bg]
				if bl then
					if al then
						bg, bi = bl, aQ(be, bh, bg)
					else
						continue
					end
				else
					if am and be:IsA("PartOperation") then
						bg, bi = "Part", aQ(be, bh, bg)
						bj = "BasePart"
					elseif not H[bg] then
						if ac then
							ac("Class not Found", bg)
						end
						bk = bg
						bg = "Folder"
					end
				end
			end
			if not bi then
				bi = X[be]
			end
			if bi and bi.__SaveSpecific then
				Q[R] = bb(bg, bi.Properties)
				R += 1
			else
				Q[R] = aU(bk or bg, be)
				R += 1
				if not (aj and not aA(be)) then
					local bl, bm
					if ah then
						bl = r[bg]
						if not bl then
							local bn = H[bg].Tags
							if not (bn and bn.NotCreatable) then
								bm = Instance.new(bg)
								bl = {}
								r[bg] = bl
							elseif ac then
								ac("Unable to create default Instance", bg)
							end
						end
					end
					local bn
					do
						local bo = bj or bg
						bn = q[bo]
						if not bn then
							bn = aY(bo)
							q[bo] = bn
						end
					end
					for _, bo in bn do
						local bp = bo.Name
						if aa[bp] then
							continue
						end
						local bq = bo.ValueType
						if aq and bq == "SharedString" then
							continue
						end
						local br, bs, bt = bo.Special, bo.Category, bo.Optional
						local bu = aT(be, bo, bp, br, bs, bt)
						if bu == aS then
							local bv, bw = pcall(n, be, bp)
							if bw == nil and not bt then
								bv = nil
							end
							if bv then
								bu = bw
							else
								local bx = bo.Fallback
								if bx then
									bv, bw = pcall(bx, be)
									if bv then
										bu = bw
									else
										if ac then
											ac("Fix Failed", bp)
										end
										continue
									end
								else
									continue
								end
							end
						end
						if ar and bq == "BinaryString" then
							bq = "SharedString"
						end
						if bl and not bo.Special and not (bp == "Source" and aA(be)) then
							if bm then
								bl[bp] = w(bm, bp)
							end
							if bl[bp] == bu then
								continue
							end
						end
						local by, bz
						if bs == "Class" then
							by = "Ref"
							if bu then
								if ay then
									local bA = ab[bu.ClassName]
									if bA and (bp == "PlayerToHideFrom" or bq ~= "Instance" and bq ~= bA) then
										continue
									end
								end
								bz = v(bu)
							else
								bz = "null"
							end
						elseif bs == "Enum" then
							bz, by = G.__ENUM(bu)
						else
							local bA = G[bq]
							if bA then
								bz, by = aW(bu, bq, bA)
							elseif "ProtectedString" == bq then
								by = bq
								if bp == "Source" then
									if at then
										if at == 1 then
											at = nil
										end
										bz = "-- Ignored"
									else
										local bB = true
										local bC
										local bD = be.LinkedSource
										local bE = bD ~= ""
										local bF
										if bE then
											local bG = be:GetFullName()
											if az then
												table.insert(az, bG)
											end
											bC = string.match(bD, "%w+$")
											if bC then
												if ao then
													local bH = as[bC]
													if bH then
														bz = bH
														bB = nil
													end
												end
												if bB then
													if an then
														bz = "-- Not found in LinkedSource ScriptCache"
														bB = nil
													end
													bF = a(bC, "%a") and "hash" or "id"
													local bI = bF .. "=" .. bC
													local bJ, bK = pcall(function()
														return game:HttpGet("https://assetdelivery.roproxy.com/v1/asset/?" .. bI)
													end)
													if bJ and aP(bK) then
														if ao then
															as[bC] = bK
														end
														bz = bK
														bB = nil
													end
												end
											else
												warn("FAILED TO EXTRACT ORIGINAL SCRIPT SOURCE (OPEN A GITHUB ISSUE): ", be:GetFullName(), bD)
											end
										end
										if bB then
											local bL = be:IsA("LocalScript")
											if bL and be.RunContext == Enum.RunContext.Server or not bL and be:IsA("Script") and be.RunContext ~= Enum.RunContext.Client then
												bz = "-- [FilteringEnabled] Server Scripts are IMPOSSIBLE to save"
											else
												bz = av(be)
												if aN then
													local bM = aN(be)
													if bM then
														bz = bM .. bz
													end
												end
											end
										end
										bz = (bE and "-- Original Source: https://assetdelivery.roblox.com/v1/asset/?" .. (bF or "id") .. "=" .. (bC or bD) .. "\n\n" or "") .. bz
									end
								end
								bz = G.__PROTECTEDSTRING(bz)
							else
								if bt then
									bA = G[bt]
									if bA then
										if bu == nil then
											continue
										else
											bz, by = aW(bu, bq, bA)
										end
									end
								end
							end
						end
						if by then
							Q[R] = aV(by, bp, bz)
							R += 1
						else
							warn("UNSUPPORTED TYPE (OPEN A GITHUB ISSUE): ", bq, bg, bp)
						end
					end
				end
				Q[R] = "</Properties>"
				R += 1
				if ae < R then
					ba()
				end
			end
			if bf ~= false then
				local bd = bi and bi.__Children or be:GetChildren()
				if #bd ~= 0 then
					bc(bd)
				end
			end
			if at and at == be then
				at = nil
			end
			Q[R] = "</Item>"
			R += 1
		end
	end
	local function bd(be, bf, bg, bh)
		Q[R] = bb((bg or "Folder"), { Name = be, Source = bh })
		R += 1
		if bf then
			bc(bf)
		end
		Q[R] = "</Item>"
		R += 1
	end
	local function be()
		do
			if ag then
				S ..= '<Meta name="ExplicitAutoJoints">true</Meta>'
			end
			i(aw, S)
		end
		ay = al or (aB or aC) and aB or aD or aF and c.getnilinstances
		bc(au)
		if aB or aC then
			local bf = m.Players.LocalPlayer
			if bf then
				if aB then
					al = true
					bd("LocalPlayer", bf:GetChildren())
				end
				if aC then
					local bg = bf.Character
					if bg then
						bd("LocalPlayer Character", bg:GetChildren())
					end
				end
			end
		end
		if aE then
			bd("StarterPlayer", m.StarterPlayer:GetChildren())
		end
		if aD then
			al = true
			bd("Players", m.Players:GetChildren())
		end
		if aF and c.getnilinstances then
			local bf, bg = {}, 1
			local bh = U.NilInstancesFixes
			for _, bi in c.getnilinstances() do
				if bi == game then
					bi = nil
				else
					local bj = bi.ClassName
					local bk = aX(bh, bj, bi)
					if bk then
						bi = bk(bi, X)
					end
					local bl = H[bj]
					if bl then
						local bm = bl.Tags
						if bm and bm.Service then
							bi = nil
						end
					end
				end
				if bi then
					bf[bg] = bi
					bg += 1
				end
			end
			al = true
			bd("Nil Instances", bf)
		end
		if U.ReadMe then
			bd("README", nil, "Script", "--[[\n" .. (#az ~= 0 and "IMPORTANT: Original Source of these Scripts was Recovered: " .. m.HttpService:JSONEncode(az) .. "\n" or "") .. "This file was generated with the following settings:\n" .. m.HttpService:JSONEncode(U) .. "\n\nElapsed time: " .. os.clock() - ax .. " PlaceId: " .. game.PlaceId .. " PlaceVersion: " .. game.PlaceVersion .. " Client Version: " .. version() .. " Executor: " .. (d and table.concat({ d() }, " ") or "Unknown") .. "\n]]")
		end
		do
			local bf = { "<SharedStrings>" }
			for bg, bh in o do
				table.insert(bf, '<SharedString md5="' .. bg .. '">' .. bh .. "</SharedString>")
			end
			if 1 < #bf then
				Q[R] = table.concat(bf)
				R += 1
				Q[R] = "</SharedStrings>"
				R += 1
			end
		end
		Q[R] = "</roblox>"
		R += 1
		ba(true)
		do
			if U.Anonymous then
				local bf = m.Players.LocalPlayer
				if bf then
					local function bg(bh, bi, bj)
						local bk = string.lower(bh)
						bi = string.lower(bi)
						local bl = 0
						local bm = {}
						local bn = #bi
						local bo = #bh
						while bn <= bo - bl do
							local bp = bl + 1
							local bq, br = string.find(bk, bi, bp, true)
							if bq == nil then
								break
							end
							table.insert(bm, string.sub(bh, bp, bq - 1))
							bl = br
						end
						if bl == 0 then
							return bh
						end
						table.insert(bm, string.sub(bh, bl + 1))
						return table.concat(bm, bj)
					end
					local bh = type(U.Anonymous) == "table" and U.Anonymous or { UserId = "1", Name = "Roblox" }
					for _, bi in P do
						bi.str = bg(string.gsub(bi.str, bf.UserId, bh.UserId), bf.Name, bh.Name)
					end
				end
			end
			local bj = U.Callback
			if bj then
				local bk = S
				for _, bl in P do
					bk ..= bl.str
				end
				bj(bk, P, O)
			elseif U.AlternativeWritefile and g then
				local bl = 4145728
				local bm, bn = math.ceil(O / bl), 1
				for _, bo in P do
					local bp = math.ceil(bo.size / bl)
					for bq = 1, bp do
						local br = string.sub(bo.str, (bq - 1) * bl + 1, bq * bl)
						aK("Writing to File " .. math.round(bn / bm * 100) .. "% (Depends on Exec)", nil, true, g, aw, br)
						bn += 1
						if bq ~= bp then
							task.wait()
						end
					end
				end
			else
				local bk = S
				for _, bl in P do
					bk ..= bl.str
				end
				aK("Writing " .. aG() .. " to File (Depends on Exec)", nil, true, i, aw, bk)
			end
		end
		table.clear(o)
	end
	local bf
	do
		local bg = m.Players
		if Z.Model ~= true then
			bf = {}
			local function bh(bi)
				table.insert(bf, bi.CharacterAdded:Connect(function(bj)
					Z[bj] = true
				end))
				local bj = bi.Character
				if bj then
					Z[bj] = true
				end
			end
			if U.RemovePlayerCharacters then
				table.insert(bf, bg.PlayerAdded:Connect(function(bi)
					bh(bi)
				end))
				for _, bi in bg:GetPlayers() do
					bh(bi)
				end
			else
				ai = false
				if aC then
					task.spawn(function()
						bh(aO())
					end)
				end
			end
		end
		if aB and Z.Player ~= true then
			task.spawn(function()
				Z[aO()] = true
			end)
		end
	end
	if aE then
		Z.StarterPlayer = false
	end
	if aD then
		Z.Players = false
	end
	if U.ShowStatus then
		do
			local bg = I._statustext
			if bg then
				bg:Destroy()
			end
		end
		local bg = Instance.new("ScreenGui")
		I._statustext = bg
		bg.DisplayOrder = 2e9
		pcall(function()
			bg.OnTopOfCoreBlur = true
		end)
		T = Instance.new("TextLabel")
		T.Text = "Saving..."
		T.BackgroundTransparency = 1
		T.Font = Enum.Font.Code
		T.AnchorPoint = Vector2.new(1)
		T.Position = UDim2.new(1)
		T.Size = UDim2.new(0.3, 0, 0, 20)
		T.TextColor3 = Color3.new(1, 1, 1)
		T.TextScaled = true
		T.TextStrokeTransparency = 0.7
		T.TextXAlignment = Enum.TextXAlignment.Right
		T.TextYAlignment = Enum.TextYAlignment.Top
		T.Parent = bg
		local function bh()
			local bi = math.random(10, 20)
			local bj = table.create(bi)
			for bk = 1, bi do
				bj[bk] = string.char(math.random(32, 126))
			end
			return table.concat(bj)
		end
		if c.gethui then
			bg.Name = bh()
			bg.Parent = c.gethui()
		else
			if c.protectgui then
				bg.Name = bh()
				c.protectgui(bg)
				bg.Parent = game:GetService("CoreGui")
			else
				local bi = game:GetService("CoreGui"):FindFirstChild("RobloxGui")
				if bi then
					bg.Parent = bi
				else
					bg.Name = bh()
					bg.Parent = game:GetService("CoreGui")
				end
			end
		end
	end
	do
		local bg = U.SafeMode
		if bg then
			task.spawn(function()
				local bh = aO()
				local bi = bh:FindFirstChild("PlayerScripts")
				if bi then
					local function bj(bk)
						local bl = bk:GetChildren()
						X[bk] = {
							__Children = bl,
						}
						for _, bm in bl do
							bj(bm)
						end
					end
					bj(bi)
					X[bh] = {
						__Children = bh:GetChildren(),
						Properties = { Name = "[" .. bh.ClassName .. "] " .. bh.Name },
					}
				end
				bh:Kick("\n[SAFEMODE] Saving in Progress..\nPlease do NOT leave")
				aI()
				task.delay(10, m.GuiService.ClearError, m.GuiService)
			end)
			m.RunService:Set3dRenderingEnabled(false)
		end
		local bh
		if U.AntiIdle then
			task.spawn(function()
				local bi = aO().Idled
				if getconnections then
					for _, bj in getconnections(bi) do
						if not pcall(function()
							bj:Disable()
						end) then
							pcall(function()
								bj:Disconnect()
							end)
						end
					end
				end
				bh = bi:Connect(function()
					m.VirtualInputManager:SendMouseWheelEvent(m.UserInputService:GetMouseLocation().X, m.UserInputService:GetMouseLocation().Y, true, game)
				end)
			end)
		end
		ax = os.clock()
		local bi, bj = xpcall(be, function(bk)
			return debug.traceback(bk)
		end)
		if bg then
			m.GuiService:ClearError()
			m.RunService:Set3dRenderingEnabled(true)
		end
		if ak then
			f = ak
		end
		if bh then
			bh:Disconnect()
		end
		if bf then
			for _, bk in bf do
				bk:Disconnect()
			end
		end
		I[aw] = nil
		if T then
			task.spawn(function()
				ax = os.clock() - ax
				local bk = math.log10(ax)
				local bl = 10
				if bi then
					T.Text = string.format("Saved! Time %.3f seconds; Size %s", ax, aG())
					T.TextColor3 = Color3.new(0, 1)
					task.wait(bk * 2 + bl)
				else
					if aJ then
						task.cancel(aJ)
						aJ = nil
					end
					T.Text = "Failed! Check F9 console for more info"
					T.TextColor3 = Color3.new(1)
					warn("Error found while saving:")
					warn(bj)
					task.wait(bk + bl)
				end
				T:Destroy()
			end)
		end
		if U.ShutdownWhenDone and bi then
			game:Shutdown()
		end
	end
end
return J
